{"version":3,"sources":["webpack://eu-vat-validation/webpack/universalModuleDefinition","webpack://eu-vat-validation/webpack/bootstrap","webpack://eu-vat-validation/./src/CountryVATCheckers.js","webpack://eu-vat-validation/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CountryVATCheckers","ATVATCheckDigit","vatnumber","total","multipliers","temp","Number","charAt","Math","floor","slice","BEVATCheckDigit","length","BGVATCheckDigit","test","month","substr","CHEVATCheckDigit","CYVATCheckDigit","String","fromCharCode","CZVATCheckDigit","czexp","Array","a","ceil","DEVATCheckDigit","product","sum","checkdigit","DKVATCheckDigit","EEVATCheckDigit","ELVATCheckDigit","ESVATCheckDigit","esexp","tempnumber","substring","replace","EUVATCheckDigit","FIVATCheckDigit","FRVATCheckDigit","GBVATCheckDigit","no","cd","abs","HRVATCheckDigit","HUVATCheckDigit","IEVATCheckDigit","ITVATCheckDigit","LTVATCheckDigit","LUVATCheckDigit","LVVATCheckDigit","MTVATCheckDigit","NLVATCheckDigit","NOVATCheckDigit","PLVATCheckDigit","PTVATCheckDigit","ROVATCheckDigit","VATlen","RSVATCheckDigit","RUVATCheckDigit","total1","multipliers1","total2","multipliers2","SEVATCheckDigit","digit","R","S","SIVATCheckDigit","SKVATCheckDigit","__webpack_exports__","src_VatValidator","constructor","defaultVatCode","validate","toCheck","defCCode","VATNumber","toUpperCase","countryVatCheckers","filter","regexp","map","cCode","RegExp","$1","cNumber","$2","reduce","memo","isValid"],"mappings":"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","file":"eu-vat-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"eu-vat-validation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"eu-vat-validation\"] = factory();\n\telse\n\t\troot[\"eu-vat-validation\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class CountryVATCheckers {\n  ATVATCheckDigit(vatnumber) {\n    // Checks the check digits of an Austrian VAT number.\n\n    let total = 0;\n    const multipliers = [1, 2, 1, 2, 1, 2, 1];\n    let temp = 0;\n\n    // Extract the next digit and multiply by the appropriate multiplier.\n    for (let i = 0; i < 7; i++) {\n      temp = Number(vatnumber.charAt(i)) * multipliers[i];\n      if (temp > 9) total += Math.floor(temp / 10) + (temp % 10);\n      else total += temp;\n    }\n\n    // Establish check digit.\n    total = 10 - ((total + 4) % 10);\n    if (total == 10) total = 0;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(7, 8)) return true;\n    else return false;\n  }\n\n  BEVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Belgium VAT number.\n\n    // Nine digit numbers have a 0 inserted at the front.\n    if (vatnumber.length == 9) vatnumber = \"0\" + vatnumber;\n\n    if (vatnumber.slice(1, 2) == 0) return false;\n\n    // Modulus 97 check on last nine digits\n    if (97 - (vatnumber.slice(0, 8) % 97) == vatnumber.slice(8, 10))\n      return true;\n    else return false;\n  }\n\n  BGVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Bulgarian VAT number.\n\n    if (vatnumber.length == 9) {\n      // Check the check digit of 9 digit Bulgarian VAT numbers.\n      var total = 0;\n\n      // First try to calculate the check digit using the first multipliers\n      var temp = 0;\n      for (var i = 0; i < 8; i++) temp += Number(vatnumber.charAt(i)) * (i + 1);\n\n      // See if we have a check digit yet\n      total = temp % 11;\n      if (total != 10) {\n        if (total == vatnumber.slice(8)) return true;\n        else return false;\n      }\n\n      // We got a modulus of 10 before so we have to keep going. Calculate the new check digit using\n      // the different multipliers\n      var temp = 0;\n      for (var i = 0; i < 8; i++) temp += Number(vatnumber.charAt(i)) * (i + 3);\n\n      // See if we have a check digit yet. If we still have a modulus of 10, set it to 0.\n      total = temp % 11;\n      if (total == 10) total = 0;\n      if (total == vatnumber.slice(8)) return true;\n      else return false;\n    }\n\n    // 10 digit VAT code - see if it relates to a standard physical person\n    if (/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/.test(vatnumber)) {\n      // Check month\n      const month = Number(vatnumber.slice(2, 4));\n      if (\n        (month > 0 && month < 13) ||\n        (month > 20 && month < 33) ||\n        (month > 40 && month < 53)\n      ) {\n        // Extract the next digit and multiply by the counter.\n        var multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n        var total = 0;\n        for (var i = 0; i < 9; i++)\n          total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n        // Establish check digit.\n        total = total % 11;\n        if (total == 10) total = 0;\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total == vatnumber.substr(9, 1)) return true;\n      }\n    }\n\n    // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n\n    // Extract the next digit and multiply by the counter.\n    var multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n    var total = 0;\n    for (var i = 0; i < 9; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Check to see if the check digit given is correct, If not, try next type of person\n    if (total % 10 == vatnumber.substr(9, 1)) return true;\n\n    // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n    // Extract the next digit and multiply by the counter.\n    var multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n    var total = 0;\n    for (var i = 0; i < 9; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = 11 - (total % 11);\n    if (total == 10) return false;\n    if (total == 11) total = 0;\n\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    if (total == vatnumber.substr(9, 1)) return true;\n    else return false;\n  }\n\n  CHEVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Swiss VAT number.\n\n    // Extract the next digit and multiply by the counter.\n    const multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n    let total = 0;\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = 11 - (total % 11);\n    if (total == 10) return false;\n    if (total == 11) total = 0;\n\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    if (total == vatnumber.substr(8, 1)) return true;\n    else return false;\n  }\n\n  CYVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Cypriot VAT number.\n\n    // Not allowed to start with '12'\n    if (Number(vatnumber.slice(0, 2) == 12)) return false;\n\n    // Extract the next digit and multiply by the counter.\n    let total = 0;\n    for (let i = 0; i < 8; i++) {\n      let temp = Number(vatnumber.charAt(i));\n      if (i % 2 == 0) {\n        switch (temp) {\n          case 0:\n            temp = 1;\n            break;\n          case 1:\n            temp = 0;\n            break;\n          case 2:\n            temp = 5;\n            break;\n          case 3:\n            temp = 7;\n            break;\n          case 4:\n            temp = 9;\n            break;\n          default:\n            temp = temp * 2 + 3;\n        }\n      }\n      total += temp;\n    }\n\n    // Establish check digit using modulus 26, and translate to char. equivalent.\n    total = total % 26;\n    total = String.fromCharCode(total + 65);\n\n    // Check to see if the check digit given is correct\n    if (total == vatnumber.substr(8, 1)) return true;\n    else return false;\n  }\n\n  CZVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Czech Republic VAT number.\n\n    let total = 0;\n    const multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n    const czexp = new Array();\n    czexp[0] = /^\\d{8}$/; //  8 digit legal entities\n    // Note - my specification says that that the following should have a range of 0-3 in the fourth\n    // digit, but the valid number CZ395601439 did not confrm, so a range of 0-9 has been allowed.\n    czexp[1] = /^[0-5][0-9][0|1|5|6][0-9][0-3][0-9]\\d{3}$/; //  9 digit individuals\n    czexp[2] = /^6\\d{8}$/; //  9 digit individuals (Special cases)\n    czexp[3] = /^\\d{2}[0-3|5-8][0-9][0-3][0-9]\\d{4}$/; // 10 digit individuals\n    var i = 0;\n\n    // Legal entities\n    if (czexp[0].test(vatnumber)) {\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++)\n        total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n      // Establish check digit.\n      total = 11 - (total % 11);\n      if (total == 10) total = 0;\n      if (total == 11) total = 1;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(7, 8)) return true;\n      else return false;\n    }\n\n    // Individuals type 1 (Standard) - 9 digits without check digit\n    else if (czexp[1].test(vatnumber)) {\n      if ((temp = Number(vatnumber.slice(0, 2)) > 62)) return false;\n      return true;\n    }\n\n    // Individuals type 2 (Special Cases) - 9 digits including check digit\n    else if (czexp[2].test(vatnumber)) {\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++)\n        total += Number(vatnumber.charAt(i + 1)) * multipliers[i];\n\n      // Establish check digit pointer into lookup table\n      if (total % 11 == 0) var a = total + 11;\n      else var a = Math.ceil(total / 11) * 11;\n      const pointer = a - total;\n\n      // Convert calculated check digit according to a lookup table;\n      const lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8];\n      if (lookup[pointer - 1] == vatnumber.slice(8, 9)) return true;\n      else return false;\n    }\n\n    // Individuals type 3 - 10 digits\n    else if (czexp[3].test(vatnumber)) {\n      var temp =\n        Number(vatnumber.slice(0, 2)) +\n        Number(vatnumber.slice(2, 4)) +\n        Number(vatnumber.slice(4, 6)) +\n        Number(vatnumber.slice(6, 8)) +\n        Number(vatnumber.slice(8));\n      if (temp % 11 == 0 && Number(vatnumber) % 11 == 0) return true;\n      else return false;\n    }\n\n    // else error\n    return false;\n  }\n\n  DEVATCheckDigit(vatnumber) {\n    // Checks the check digits of a German VAT number.\n\n    let product = 10;\n    let sum = 0;\n    let checkdigit = 0;\n    for (let i = 0; i < 8; i++) {\n      // Extract the next digit and implement peculiar algorithm!.\n      sum = (Number(vatnumber.charAt(i)) + product) % 10;\n      if (sum == 0) {\n        sum = 10;\n      }\n      product = (2 * sum) % 11;\n    }\n\n    // Establish check digit.\n    if (11 - product == 10) {\n      checkdigit = 0;\n    } else {\n      checkdigit = 11 - product;\n    }\n\n    // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n    // check digit.\n    if (checkdigit == vatnumber.slice(8, 9)) return true;\n    else return false;\n  }\n\n  DKVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Danish VAT number.\n\n    let total = 0;\n    const multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = total % 11;\n\n    // The remainder should be 0 for it to be valid..\n    if (total == 0) return true;\n    else return false;\n  }\n\n  EEVATCheckDigit(vatnumber) {\n    // Checks the check digits of an Estonian VAT number.\n\n    let total = 0;\n    const multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits using modulus 10.\n    total = 10 - (total % 10);\n    if (total == 10) total = 0;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(8, 9)) return true;\n    else return false;\n  }\n\n  ELVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Greek VAT number.\n\n    let total = 0;\n    const multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n    //eight character numbers should be prefixed with an 0.\n    if (vatnumber.length == 8) {\n      vatnumber = \"0\" + vatnumber;\n    }\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = total % 11;\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(8, 9)) return true;\n    else return false;\n  }\n\n  ESVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Spanish VAT number.\n\n    let total = 0;\n    let temp = 0;\n    const multipliers = [2, 1, 2, 1, 2, 1, 2];\n    const esexp = new Array();\n    esexp[0] = /^[A-H|J|U|V]\\d{8}$/;\n    esexp[1] = /^[A-H|N-S|W]\\d{7}[A-J]$/;\n    esexp[2] = /^[0-9|Y|Z]\\d{7}[A-Z]$/;\n    esexp[3] = /^[K|L|M|X]\\d{7}[A-Z]$/;\n    let i = 0;\n\n    // National juridical entities\n    if (esexp[0].test(vatnumber)) {\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = Number(vatnumber.charAt(i + 1)) * multipliers[i];\n        if (temp > 9) total += Math.floor(temp / 10) + (temp % 10);\n        else total += temp;\n      }\n      // Now calculate the check digit itself.\n      total = 10 - (total % 10);\n      if (total == 10) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(8, 9)) return true;\n      else return false;\n    }\n\n    // Juridical entities other than national ones\n    else if (esexp[1].test(vatnumber)) {\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = Number(vatnumber.charAt(i + 1)) * multipliers[i];\n        if (temp > 9) total += Math.floor(temp / 10) + (temp % 10);\n        else total += temp;\n      }\n\n      // Now calculate the check digit itself.\n      total = 10 - (total % 10);\n      total = String.fromCharCode(total + 64);\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(8, 9)) return true;\n      else return false;\n    }\n\n    // Personal number (NIF) (starting with numeric of Y or Z)\n    else if (esexp[2].test(vatnumber)) {\n      let tempnumber = vatnumber;\n      if (tempnumber.substring(0, 1) == \"Y\")\n        tempnumber = tempnumber.replace(/Y/, \"1\");\n      if (tempnumber.substring(0, 1) == \"Z\")\n        tempnumber = tempnumber.replace(/Z/, \"2\");\n      return (\n        tempnumber.charAt(8) ==\n        \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt(\n          Number(tempnumber.substring(0, 8)) % 23\n        )\n      );\n    }\n\n    // Personal number (NIF) (starting with K, L, M, or X)\n    else if (esexp[3].test(vatnumber)) {\n      return (\n        vatnumber.charAt(8) ==\n        \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt(Number(vatnumber.substring(1, 8)) % 23)\n      );\n    } else return false;\n  }\n\n  EUVATCheckDigit(vatnumber) {\n    // We know little about EU numbers apart from the fact that the first 3 digits represent the\n    // country, and that there are nine digits in total.\n    return true;\n  }\n\n  FIVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Finnish VAT number.\n\n    let total = 0;\n    const multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = 11 - (total % 11);\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(7, 8)) return true;\n    else return false;\n  }\n\n  FRVATCheckDigit(vatnumber) {\n    // Checks the check digits of a French VAT number.\n\n    if (!/^\\d{11}$/.test(vatnumber)) return true;\n\n    // Extract the last nine digits as an integer.\n    let total = vatnumber.substring(2);\n\n    // Establish check digit.\n    total = (total * 100 + 12) % 97;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(0, 2)) return true;\n    else return false;\n  }\n\n  GBVATCheckDigit(vatnumber) {\n    // Checks the check digits of a UK VAT number.\n\n    const multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n    // Government departments\n    if (vatnumber.substr(0, 2) == \"GD\") {\n      if (vatnumber.substr(2, 3) < 500) return true;\n      else return false;\n    }\n\n    // Health authorities\n    if (vatnumber.substr(0, 2) == \"HA\") {\n      if (vatnumber.substr(2, 3) > 499) return true;\n      else return false;\n    }\n\n    // Standard and commercial numbers\n    let total = 0;\n\n    // 0 VAT numbers disallowed!\n    if (Number(vatnumber.slice(0)) == 0) return false;\n\n    // Check range is OK for modulus 97 calculation\n    const no = Number(vatnumber.slice(0, 7));\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n    // VAT number could use either system, so we check it against both.\n\n    // Establish check digits by subtracting 97 from total until negative.\n    let cd = total;\n    while (cd > 0) {\n      cd = cd - 97;\n    }\n\n    // Get the absolute value and compare it with the last two characters of the VAT number. If the\n    // same, then it is a valid traditional check digit. However, even then the number must fit within\n    // certain specified ranges.\n    cd = Math.abs(cd);\n    if (\n      cd == vatnumber.slice(7, 9) &&\n      no < 9990001 &&\n      (no < 100000 || no > 999999) &&\n      (no < 9490001 || no > 9700000)\n    )\n      return true;\n\n    // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n    if (cd >= 55) cd = cd - 55;\n    else cd = cd + 42;\n    if (cd == vatnumber.slice(7, 9) && no > 1000000) return true;\n    else return false;\n  }\n\n  HRVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n    let product = 10;\n    let sum = 0;\n    const checkdigit = 0;\n\n    for (let i = 0; i < 10; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (Number(vatnumber.charAt(i)) + product) % 10;\n      if (sum == 0) {\n        sum = 10;\n      }\n      product = (2 * sum) % 11;\n    }\n\n    // Now check that we have the right check digit\n    if ((product + vatnumber.slice(10, 11) * 1) % 10 == 1) return true;\n    else return false;\n  }\n\n  HUVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Hungarian VAT number.\n\n    let total = 0;\n    const multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digit.\n    total = 10 - (total % 10);\n    if (total == 10) total = 0;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(7, 8)) return true;\n    else return false;\n  }\n\n  IEVATCheckDigit(vatnumber) {\n    // Checks the check digits of an Irish VAT number.\n\n    let total = 0;\n    const multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n    // If the code is type 1 format, we need to convert it to the new before performing the validation.\n    if (/^\\d[A-Z\\*\\+]/.test(vatnumber))\n      vatnumber =\n        \"0\" +\n        vatnumber.substring(2, 7) +\n        vatnumber.substring(0, 1) +\n        vatnumber.substring(7, 8);\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // If the number is type 3 then we need to include the trailing A or H in the calculation\n    if (/^\\d{7}[A-Z][AH]$/.test(vatnumber)) {\n      // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n      if (vatnumber.charAt(8) == \"H\") total += 72;\n      else total += 9;\n    }\n\n    // Establish check digit using modulus 23, and translate to char. equivalent.\n    total = total % 23;\n    if (total == 0) total = \"W\";\n    else total = String.fromCharCode(total + 64);\n\n    // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(7, 8)) return true;\n    else return false;\n  }\n\n  ITVATCheckDigit(vatnumber) {\n    // Checks the check digits of an Italian VAT number.\n\n    let total = 0;\n    const multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n    let temp;\n\n    // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n    if (Number(vatnumber.slice(0, 7)) == 0) return false;\n    temp = Number(vatnumber.slice(7, 10));\n    if (temp < 1 || (temp > 201 && temp != 999 && temp != 888)) return false;\n\n    // Extract the next digit and multiply by the appropriate\n    for (let i = 0; i < 10; i++) {\n      temp = Number(vatnumber.charAt(i)) * multipliers[i];\n      if (temp > 9) total += Math.floor(temp / 10) + (temp % 10);\n      else total += temp;\n    }\n\n    // Establish check digit.\n    total = 10 - (total % 10);\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(10, 11)) return true;\n    else return false;\n  }\n\n  LTVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Lithuanian VAT number.\n\n    // 9 character VAT numbers are for legal persons\n    if (vatnumber.length == 9) {\n      // 8th character must be one\n      if (!/^\\d{7}1/.test(vatnumber)) return false;\n\n      // Extract the next digit and multiply by the counter+1.\n      var total = 0;\n      for (var i = 0; i < 8; i++)\n        total += Number(vatnumber.charAt(i)) * (i + 1);\n\n      // Can have a double check digit calculation!\n      if (total % 11 == 10) {\n        var multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n        total = 0;\n        for (i = 0; i < 8; i++)\n          total += Number(vatnumber.charAt(i)) * multipliers[i];\n      }\n\n      // Establish check digit.\n      total = total % 11;\n      if (total == 10) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(8, 9)) return true;\n      else return false;\n    }\n\n    // 12 character VAT numbers are for temporarily registered taxpayers\n    else {\n      // 11th character must be one\n      if (!/^\\d{10}1/.test(vatnumber)) return false;\n\n      // Extract the next digit and multiply by the counter+1.\n      var total = 0;\n      var multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n      for (var i = 0; i < 11; i++)\n        total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n      // Can have a double check digit calculation!\n      if (total % 11 == 10) {\n        var multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n        total = 0;\n        for (i = 0; i < 11; i++)\n          total += Number(vatnumber.charAt(i)) * multipliers[i];\n      }\n\n      // Establish check digit.\n      total = total % 11;\n      if (total == 10) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(11, 12)) return true;\n      else return false;\n    }\n  }\n\n  LUVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Luxembourg VAT number.\n\n    if (vatnumber.slice(0, 6) % 89 == vatnumber.slice(6, 8)) return true;\n    else return false;\n  }\n\n  LVVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Latvian VAT number.\n\n    // Differentiate between legal entities and natural bodies. For the latter we simply check that\n    // the first six digits correspond to valid DDMMYY dates.\n    if (/^[0-3]/.test(vatnumber)) {\n      if (/^[0-3][0-9][0-1][0-9]/.test(vatnumber)) return true;\n      else return false;\n    } else {\n      let total = 0;\n      const multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n      // Extract the next digit and multiply by the counter.\n      for (let i = 0; i < 10; i++)\n        total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n      // Establish check digits by getting modulus 11.\n      if (total % 11 == 4 && vatnumber[0] == 9) total = total - 45;\n      if (total % 11 == 4) total = 4 - (total % 11);\n      else if (total % 11 > 4) total = 14 - (total % 11);\n      else if (total % 11 < 4) total = 3 - (total % 11);\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(10, 11)) return true;\n      else return false;\n    }\n  }\n\n  MTVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Maltese VAT number.\n\n    let total = 0;\n    const multipliers = [3, 4, 6, 7, 8, 9];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 6; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits by getting modulus 37.\n    total = 37 - (total % 37);\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(6, 8) * 1) return true;\n    else return false;\n  }\n\n  NLVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Dutch VAT number.\n\n    let total = 0;\n    const multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits by getting modulus 11.\n    total = total % 11;\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(8, 9)) return true;\n    else return false;\n  }\n\n  NOVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Norwegian VAT number.\n    // See http://www.brreg.no/english/coordination/number.html\n\n    let total = 0;\n    const multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n    total = 11 - (total % 11);\n    if (total == 11) {\n      total = 0;\n    }\n    if (total < 10) {\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      if (total == vatnumber.slice(8, 9)) return true;\n      else return false;\n    }\n  }\n\n  PLVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Polish VAT number.\n\n    let total = 0;\n    const multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 9; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = total % 11;\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(9, 10)) return true;\n    else return false;\n  }\n\n  PTVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Portugese VAT number.\n\n    let total = 0;\n    const multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 8; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = 11 - (total % 11);\n    if (total > 9) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(8, 9)) return true;\n    else return false;\n  }\n\n  ROVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Romanian VAT number.\n\n    let multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n    // Extract the next digit and multiply by the counter.\n    const VATlen = vatnumber.length;\n    multipliers = multipliers.slice(10 - VATlen);\n    let total = 0;\n    for (let i = 0; i < vatnumber.length - 1; i++) {\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n    }\n\n    // Establish check digits by getting modulus 11.\n    total = (10 * total) % 11;\n    if (total == 10) total = 0;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (total == vatnumber.slice(vatnumber.length - 1, vatnumber.length))\n      return true;\n    else return false;\n  }\n\n  RSVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n    let product = 10;\n    let sum = 0;\n    const checkdigit = 0;\n\n    for (let i = 0; i < 8; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (Number(vatnumber.charAt(i)) + product) % 10;\n      if (sum == 0) {\n        sum = 10;\n      }\n      product = (2 * sum) % 11;\n    }\n\n    // Now check that we have the right check digit\n    if ((product + vatnumber.slice(8, 9) * 1) % 10 == 1) return true;\n    else return false;\n  }\n  RUVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Russian INN number\n    // See http://russianpartner.biz/test_inn.html for algorithm\n\n    // 10 digit INN numbers\n    if (vatnumber.length == 10) {\n      let total = 0;\n      const multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n      for (var i = 0; i < 10; i++) {\n        total += Number(vatnumber.charAt(i)) * multipliers[i];\n      }\n      total = total % 11;\n      if (total > 9) {\n        total = total % 10;\n      }\n\n      // Compare it with the last character of the VAT number. If it is the same, then it's valid\n      if (total == vatnumber.slice(9, 10)) return true;\n      else return false;\n\n      // 12 digit INN numbers\n    } else if (vatnumber.length == 12) {\n      let total1 = 0;\n      const multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n      let total2 = 0;\n      const multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n      for (var i = 0; i < 11; i++)\n        total1 += Number(vatnumber.charAt(i)) * multipliers1[i];\n      total1 = total1 % 11;\n      if (total1 > 9) {\n        total1 = total1 % 10;\n      }\n\n      for (var i = 0; i < 11; i++)\n        total2 += Number(vatnumber.charAt(i)) * multipliers2[i];\n      total2 = total2 % 11;\n      if (total2 > 9) {\n        total2 = total2 % 10;\n      }\n\n      // Compare the first check with the 11th character and the second check with the 12th and last\n      // character of the VAT number. If they're both the same, then it's valid\n      if (\n        total1 == vatnumber.slice(10, 11) &&\n        total2 == vatnumber.slice(11, 12)\n      )\n        return true;\n      else return false;\n    }\n  }\n\n  SEVATCheckDigit(vatnumber) {\n    // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n    let R = 0;\n    let digit;\n    for (var i = 0; i < 9; i = i + 2) {\n      digit = Number(vatnumber.charAt(i));\n      R += Math.floor(digit / 5) + ((digit * 2) % 10);\n    }\n\n    // Calculate S where S = C2 + C4 + C6 + C8\n    let S = 0;\n    for (var i = 1; i < 9; i = i + 2) S += Number(vatnumber.charAt(i));\n\n    // Calculate the Check Digit\n    const cd = (10 - ((R + S) % 10)) % 10;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    if (cd == vatnumber.slice(9, 10)) return true;\n    else return false;\n  }\n\n  SIVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Slovenian VAT number.\n\n    let total = 0;\n    const multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++)\n      total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n    // Establish check digits using modulus 11\n    total = 11 - (total % 11);\n    if (total == 10) {\n      total = 0;\n    }\n\n    // Compare the number with the last character of the VAT number. If it is the\n    // same, then it's a valid check digit.\n    if (total != 11 && total == vatnumber.slice(7, 8)) return true;\n    else return false;\n  }\n\n  SKVATCheckDigit(vatnumber) {\n    // Checks the check digits of a Slovakian VAT number.\n\n    // Check that the modulus of the whole VAT number is 0 - else error\n    if (Number(vatnumber % 11) == 0) return true;\n    else return false;\n  }\n}\n","import CountryVATCheckers from \"./CountryVATCheckers\";\n\nexport default class VatValidator {\n  constructor(defaultVatCode = \"DE\") {\n    this.defaultVatCode = defaultVatCode;\n  }\n\n  validate(toCheck) {\n    // To change the default country (e.g. from the UK to Germany - DE):\n    //    1.  Change the country code in the defCCode variable below to \"DE\".\n    //    2.  Remove the question mark from the regular expressions associated with the UK VAT number:\n    //        i.e. \"(GB)?\" -> \"(GB)\"\n    //    3.  Add a question mark into the regular expression associated with Germany's number\n    //        following the country code: i.e. \"(DE)\" -> \"(DE)?\"\n\n    const defCCode = this.defaultVatCode;\n\n    // Note - VAT codes without the \"**\" in the comment do not have check digit checking.\n    const vatexp = [\n      /^(AT)U(\\d{8})$/, //** Austria\n      /^(BE)(0?\\d{9})$/, //** Belgium\n      /^(BG)(\\d{9,10})$/, //** Bulgaria\n      /^(CHE)(\\d{9})(MWST|TVA|IVA)?$/, //** Switzerland\n      /^(CY)([0-59]\\d{7}[A-Z])$/, //** Cyprus\n      /^(CZ)(\\d{8,10})(\\d{3})?$/, //** Czech Republic\n      /^(DE)([1-9]\\d{8})$/, //** Germany\n      /^(DK)(\\d{8})$/, //** Denmark\n      /^(EE)(10\\d{7})$/, //** Estonia\n      /^(EL)(\\d{9})$/, //** Greece\n      /^(ES)([A-Z]\\d{8})$/, //** Spain (National juridical entities)\n      /^(ES)([A-HN-SW]\\d{7}[A-J])$/, //** Spain (Other juridical entities)\n      /^(ES)([0-9YZ]\\d{7}[A-Z])$/, //** Spain (Personal entities type 1)\n      /^(ES)([KLMX]\\d{7}[A-Z])$/, //** Spain (Personal entities type 2)\n      /^(EU)(\\d{9})$/, //** EU-type\n      /^(FI)(\\d{8})$/, //** Finland\n      /^(FR)(\\d{11})$/, //** France (1)\n      /^(FR)([A-HJ-NP-Z]\\d{10})$/, // France (2)\n      /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/, // France (3)\n      /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/, // France (4)\n      /^(GB)?(\\d{9})$/, //** UK (Standard)\n      /^(GB)?(\\d{12})$/, //** UK (Branches)\n      /^(GB)?(GD\\d{3})$/, //** UK (Government)\n      /^(GB)?(HA\\d{3})$/, //** UK (Health authority)\n      /^(HR)(\\d{11})$/, //** Croatia\n      /^(HU)(\\d{8})$/, //** Hungary\n      /^(IE)(\\d{7}[A-W])$/, //** Ireland (1)\n      /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/, //** Ireland (2)\n      /^(IE)(\\d{7}[A-W][AH])$/, //** Ireland (3)\n      /^(IT)(\\d{11})$/, //** Italy\n      /^(LV)(\\d{11})$/, //** Latvia\n      /^(LT)(\\d{9}|\\d{12})$/, //** Lithunia\n      /^(LU)(\\d{8})$/, //** Luxembourg\n      /^(MT)([1-9]\\d{7})$/, //** Malta\n      /^(NL)(\\d{9})B\\d{2}$/, //** Netherlands\n      /^(NO)(\\d{9})$/, //** Norway (not EU)\n      /^(PL)(\\d{10})$/, //** Poland\n      /^(PT)(\\d{9})$/, //** Portugal\n      /^(RO)([1-9]\\d{1,9})$/, //** Romania\n      /^(RU)(\\d{10}|\\d{12})$/, //** Russia\n      /^(RS)(\\d{9})$/, //** Serbia\n      /^(SI)([1-9]\\d{7})$/, //** Slovenia\n      /^(SK)([1-9]\\d[2346-9]\\d{7})$/, //** Slovakia Republic\n      /^(SE)(\\d{10}01)$/ //** Sweden\n    ];\n    // Load up the string to check\n    let VATNumber = toCheck.toUpperCase();\n\n    // Remove spaces etc. from the VAT number to help validation\n    VATNumber = VATNumber.replace(/(\\s|-|\\.)+/g, \"\");\n\n    const countryVatCheckers = new CountryVATCheckers();\n\n    return vatexp\n      .filter(regexp => regexp.test(VATNumber))\n      .map(regexp => {\n        regexp.test(VATNumber);\n        let cCode = RegExp.$1; // Isolate country code\n        const cNumber = RegExp.$2; // Isolate the number\n        if (cCode.length === 0) {\n          cCode = defCCode;\n        } // Set up default country code\n        // Call the appropriate country VAT validation routine depending on the country code\n        return countryVatCheckers[`${cCode}VATCheckDigit`](cNumber);\n      })\n      .reduce((memo, isValid) => isValid, false);\n  }\n}\n"],"sourceRoot":""}